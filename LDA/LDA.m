function [Y, W] = LDA(train_data,train_labels)    %LDA Linear Discriminant Analysis on data    %   INPUT:    %   train_data = training data (features in columns, samples in rows)    %   test_data = test data (features in columns, samples in rows)     %   OUTPUT:     %   Y = transformed training data    %   W = Projection matrix      [N,D] = size(train_data);     %Total Average     Tot_avg = mean(train_data,1);     SW = zeros(D,D);     SB = zeros(D,D);for i=1:1:10    clear index data;    index = find(train_labels==i-1);    data = train_data(index,:);    %Mean of each class    avg(i,:) = mean(data,1);    %Number of observations of each class    prior(i) = length(index)/length(train_labels);    %Center data    Avg_Data = data-repmat(avg(i,:),[length(index),1]);    %Class specific covariance matrix    S_i{i} = (Avg_Data'*Avg_Data)/length(index);    %Within class scatter matrix    SW = SW + prior(i)*S_i{i};    %Between class scatter matrix    SB = SB +  prior(i)*((avg(i,:)-Tot_avg)'*(avg(i,:)-Tot_avg));end    SW = SW+0.001*eye(size(SW));    invSw = inv(SW);    invSw_by_SB = invSw * SB;    %Sort Eigen values and vectors    [eigVectors, eigValues] = eig(invSw_by_SB);    [lambda,inx] = sort(diag(eigValues),'descend');      W = eigVectors(:,inx);     %Eig vectors     W = W(:,1:9);     %New data projection     Y = train_data*W;    end